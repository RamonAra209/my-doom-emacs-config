#+TITLE: test
#+STARTUP: show2levels
#+PROPERTY: header-args :tangle config.el
#+auto_tangle: t

* Table of Contents :TOC_3:noexport:
- [[#visual][Visual]]
  - [[#theme][Theme]]
  - [[#line-numbers][Line Numbers]]
- [[#evil-mode][Evil Mode]]
  - [[#evil-snipe][Evil Snipe]]
  - [[#evil-goggles][Evil Goggles]]
- [[#lsp-ui][LSP-UI]]
- [[#org-mode][Org Mode]]
  - [[#opening-tag-for-org-mode-keep-at-top][Opening tag for org mode (keep at top)]]
  - [[#key-bindings][Key bindings]]
  - [[#org-directories][Org Directories]]
  - [[#fancy-org][Fancy Org]]
  - [[#latex][Latex]]
  - [[#org-reveal-fancy-presentations][Org Reveal (fancy presentations)]]
  - [[#auto-tangle][Auto-Tangle]]
  - [[#org-tempo-org-structure-templates][Org-Tempo (org structure templates)]]
  - [[#closing-tag-for-org-mode-keep-at-bottom][Closing tag for org mode (keep at bottom)]]
- [[#programming-languages--snippets--mode-maps][Programming Languages + Snippets + mode maps]]
  - [[#python][Python]]
  - [[#snippets][Snippets]]
- [[#projectile][Projectile]]
- [[#tramp][Tramp]]
- [[#global-keybindings][Global Keybindings]]
- [[#random-variables][Random variables]]

* Visual
** Theme
#+begin_src emacs-lisp
(setq doom-theme 'doom-old-hope)
#+end_src
** Line Numbers
#+begin_src emacs-lisp
(custom-theme-set-faces! 'doom-old-hope
    (set-face-foreground 'line-number "#708090")
    (set-face-foreground 'line-number-current-line "#ef7c2b")) ;; orange

(beacon-mode 1) ;; never lose that cursor ever again
#+end_src
* Evil Mode
** Evil Snipe
#+begin_src emacs-lisp
(require 'evil-snipe)
#+end_src
** Evil Goggles
#+begin_src emacs-lisp
(use-package! evil-goggles
        :config
        (setq evil-goggles-duration 0.150)
        (setq evil-goggles-enable-change t)
        (setq evil-goggles-enable-delete t)
        (evil-goggles-use-diff-faces)
)
#+end_src
* LSP-UI
#+begin_src emacs-lisp
(setq lsp-ui-sideline-enable nil)
(setq lsp-ui-sideline-show-hover t)
(setq lsp-ui-doc-show-with-mouse t)
(setq lsp-ui-doc-enable t)
#+end_src
* Org Mode
#+begin_src emacs-lisp
(setq org-directory '("~/Library/Mobile Documents/com~apple~CloudDocs/Documents/org")) ;; main org directory
#+end_src
** Opening tag for org mode (keep at top)
#+begin_src emacs-lisp
(after! org ;; opening segment of org mode section
#+end_src
** Key bindings
#+begin_src emacs-lisp
(map! :map org-mode-map ;; Moving indent blocks with vim keybindings
        :n "M-j" #'org-metadown
        :n "M-k" #'org-metaup)
#+end_src
** Org Directories
#+begin_src emacs-lisp
(setq org-agenda-files (apply 'append
        (mapcar
            (lambda (directory)
                (directory-files-recursively
                directory org-agenda-file-regexp))
        '("~/Developer/" "~/Library/Mobile Documents/com~apple~CloudDocs/Documents/org"))))
#+end_src
** Fancy Org
#+begin_src emacs-lisp
(require 'org-bullets)
(add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
(use-package! org-fancy-priorities
                :hook (org-mode . org-fancy-priorities-mode)
                :config
                (setq org-fancy-priorities-list '("HIGH" "MEDIUM" "LOW" "â˜•"))
                    org-todo-keywords '((sequence "HW")))

(setq org-agenda-skip-scheduled-if-done t ;; for setting todo priority colors
        org-priority-faces '((65 :foreground "#FF0000")
                        (66 :foreground "#0098dd")
                        (67 :foreground "#da8548")))

(setq org-capture-templates
      '(
        ("t" "General Todo" entry (file+headline "~/Library/Mobile Documents/com~apple~CloudDocs/Documents/org/gtd.org" "Tasks")
         "* TODO %?\n  %i\n  %a")
        ("j" "Journal" entry (file+datetree "~/Library/Mobile Documents/com~apple~CloudDocs/Documents/org/journal.org")
         "* %?\nEntered on %U\n  %i\n  %a")
        ("w" "Work Todo Entries")
            ("we" "No Time" entry (file "~/Library/Mobile Documents/com~apple~CloudDocs/Documents/org/work.org")
             "** %^{Type|HW|READ|TODO|PROJ} %^{Todo title} %?" :prepend t :empty-lines-before 0
             :refile-targets (("~/Library/Mobile Documents/com~apple~CloudDocs/Documents/org/work.org" :maxlevel . 2)))

            ("ws" "Scheduled" entry (file "~/Library/Mobile Documents/com~apple~CloudDocs/Documents/org/work.org")
             "** %^{Type|HW|READ|TODO|PROJ} %^{Todo title}\nSCHEDULED: %^t%?" :prepend t :empty-lines-before 0
             :refile-targets (("~/Library/Mobile Documents/com~apple~CloudDocs/Documents/org/work.org" :maxlevel . 2)))

            ("wd" "Deadline" entry (file "~/Library/Mobile Documents/com~apple~CloudDocs/Documents/org/work.org")
             "** %^{Type|HW|READ|TODO|PROJ} %^{Todo title}\nDEADLINE: %^t%?" :prepend t :empty-lines-before 0
             :refile-targets (("~/Library/Mobile Documents/com~apple~CloudDocs/Documents/org/work.org" :maxlevel . 2)))

            ("ww" "Scheduled & deadline" entry (file "~/Library/Mobile Documents/com~apple~CloudDocs/Documents/org/work.org")
             "** %^{Type|HW|READ|TODO|PROJ} %^{Todo title}\nSCHEDULED: %^t DEADLINE: %^t %?" :prepend t :empty-lines-before 0
             :refile-targets (("~/Library/Mobile Documents/com~apple~CloudDocs/Documents/org/work.org" :maxlevel . 2)))
            )
)

;; (setq ((org-super-agenda-groups
;;         '(
;;             (:name "Today" :time-grid t :scheduled today)
;;             (:name "Due today" :deadline today)
;;             (:name "Important" :priority "A")
;;             (:name "Overdue" :deadline past)
;;             (:name "Due soon" :deadline future)
;;             (:name "All other priorites" :priority<= "B" :order 1)
;;           )
;;         ))
;;     (org-agenda nil "a")
;; )
#+end_src
** Latex
#+begin_src emacs-lisp
(require 'latex-preview-pane)
(latex-preview-pane-enable)
#+end_src
** Org Reveal (fancy presentations)
#+begin_src emacs-lisp
(load-library "ox-reveal")
(setq org-reveal-root "/Users/tahpramen/reveal.js-master")
#+end_src
** Auto-Tangle
#+begin_src emacs-lisp
(use-package! org-auto-tangle
    :defer t
    :hook (org-mode . org-auto-tangle-mode)
    :config
    (setq org-auto-tangle-default t))
#+end_src
** Org-Tempo (org structure templates)
#+begin_src emacs-lisp
(require 'org-tempo)
(add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
(add-to-list 'org-structure-template-alist '("py" . "src python :results output"))
#+end_src
** Closing tag for org mode (keep at bottom)
#+begin_src emacs-lisp
) ;; closing parentheses for org mode section
#+end_src
* Programming Languages + Snippets + mode maps
** Python
#+begin_src emacs-lisp
(use-package! pyvenv
  :diminish
  :config
  (setq pyvenv-mode-line-indicator
        '(pyvenv-virtual-env-name ("[venv:" pyvenv-virtual-env-name "] ")))
  (pyvenv-mode +1))

(use-package! numpydoc
  :ensure t
  :bind (:map python-mode-map
              ("C-c C-n" . numpydoc-generate)))
#+end_src
** Snippets
#+begin_src emacs-lisp
(yas-global-mode 1)
(add-hook 'yas-minor-mode-hook (lambda () (yas-activate-extra-mode 'fundamental-mode)))
#+end_src
* Projectile
#+begin_src emacs-lisp
(setq projectile-project-search-path '("~/Developer/" "~/Developer/Personal-Projects/")) ;; add downloads here
#+end_src
* Tramp
#+begin_src emacs-lisp
;; (add-to-list 'eglot-server-programs '(python-mode . ("pyright")))
#+end_src
* Global Keybindings
#+begin_src emacs-lisp
(map! :after vterm ;; allows ctrl-c to kill process in vterm
      :map vterm-mode-map
      :ni "C-c" #'vterm-send-C-c)

(map! :leader ;; sets default behavior so that spc-w-v follows new window'
      :desc "Split current window vertically, then focus on new window"
      "w v" #'+evil/window-vsplit-and-follow)

(evilem-default-keybindings "SPC")
(map! :leader :desc "evilmotion find" "f j" #'avy-goto-char-timer)

(after! company ;; enabling tab complete how it should be
  (dolist (key '("<return>" "RET"))
    (define-key company-active-map (kbd key)
      `(menu-item nil company-complete
                  :filter ,(lambda (cmd)
                             (when (company-explicit-action-p)
                              cmd)))))
  ;; (define-key company-active-map (kbd "TAB") #'company-complete-selection)
  (map! :map company-active-map "TAB" #'company-complete-selection)
  (map! :map company-active-map "<tab>" #'company-complete-selection)
  (define-key company-active-map (kbd "SPC") nil)

  (setq company-auto-commit-chars nil)
  )
#+end_src

* Random variables
#+begin_src emacs-lisp
(setq company-idle-delay 0.05)
#+end_src
